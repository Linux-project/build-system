#!/usr/bin/env perl
#
# The build-system is Copyright (C) 2017 Alexander Kuleshov <kuleshovmail@gmail.com>,
#
# Github: https://github.com/0xAX/kernel-dev/tree/master/kernel-testing

use strict;
use warnings "all";
use diagnostics;

use YAML;
use Data::Dumper;
use Getopt::Long;
use Scalar::Util qw(looks_like_number);

use constant OUTPUT_DIR => "./_output";

require "./scripts/provision/initramfs.pm";

require "./scripts/disk.pm";
require "./scripts/partitions.pm";
require "./scripts/fs.pm";
require "./scripts/mount.pm";
require "./scripts/utils.pm";

# specification file that will be processed
my $spec = '';
# specification content
my $spec_data = '';
# help and version flags
my $help = '';
my $version = '';

# path to directory with image
my $img_dir = '';
# path to image
my $image = '';
# path to partitions specification
my $partitions_spec = '';
# result from some specific routines
my $mount_points = '';
# path to root dir of a created disk
my $root_dir = '';

# standard directories noted in FHS 3.0
my @fhs = ("/bin", "/dev", "/etc", "/lib", "/lib64",
           "/root", "/sys", "/tmp", "/sbin",
           "/var", "/var/run", "/usr", "/usr/bin",
           "/usr/include", "/usr/lib", "/usr/share");

# check command line arguments count
my $args = @ARGV;
if ($args == 0) {
    $help = 1;
}

# parse command line options
GetOptions(
    "spec=s" => \$spec,
    "help" => \$help,
    "version" => \$version)
    or die("Wrong set of command line arguments were passed\n");

if (looks_like_number($help)) {
    print "Usage:\n";
    print "  build-system [opts]\n";
    print "Options:\n";
    print "  -s/--spec - provide yaml specification\n";
    print "  -h/--hlpe - print this help message\n";
    print "  -v/--version - print version of build-system\n";
    exit 0;
}

if (looks_like_number($version)) {
    print "build-system 0.0.1\n";
    exit 0;
}

if ($spec eq '') {
    print STDERR "Error: specification must be provided\n";
    exit 1;
}

if ($< != 0) {
    print STDERR "Error: run build-sytem script as administartor\n";
    exit 1;
}

# create directory for output images if it is not exists
create_dir_if_not_exists(OUTPUT_DIR);

# open and read full specification file
open(my $spec_fd, "<", $spec)
    or die("Error: can't read given specification - $!");
$spec_data = do {local $/; <$spec_fd>};

# load and parse yaml specification
$spec_data = YAML::Load($spec_data);

#
# create new disk if need
#
($img_dir, $image) = init_disk($spec_data, $spec, OUTPUT_DIR);

#
# create specified partitions
#
if (is_disk_partitioned($image) == 1) {
    print STDOUT "Warning: disk $image is already partitioned\n";
} else {
    $partitions_spec = create_partitions($spec_data, $image);
}

#
# format partitions with the given filesystems
#
$mount_points = make_fs($spec_data, $image);
if ($mount_points == -1) {
    delete_loop_devices($image);
    exit 1;
}

#
# mount given partitions
#
$root_dir = mount_partitions($spec_data, $image, $mount_points);
if (looks_like_number($root_dir)) {
    delete_loop_devices($image);
    exit 1;
}

#
# provision FHS directories
#
print "[info] create file system hierarchy\n";
foreach (@fhs) {
    mkdir($root_dir . $_);
}

#
# umount all partitions
#
umount_partitions($mount_points);

#
# delete loop devices
#
delete_loop_devices($image);

# close specification file
close($spec_fd)
    or warn "Error: can't close specification file - $!";

exit 0;
