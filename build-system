#!/usr/bin/env perl
#
# The build-system is Copyright (C) 2017 Alexander Kuleshov <kuleshovmail@gmail.com>,
#
# Github: https://github.com/0xAX/kernel-dev/tree/master/kernel-testing

use strict;
use warnings "all";
use diagnostics;

use YAML;
use Data::Dumper;
use Getopt::Long;

use constant OUTPUT_DIR => "./_output";

require "./scripts/disk.pm";
require "./scripts/partitions.pm";
require "./scripts/fs.pm";
require "./scripts/utils.pm";

# specification file that will be processed
my $spec = '';
# specification content
my $spec_data = '';
# help and version flags
my $help = '';
my $version = '';

# path to directory with image
my $img_dir = '';
# path to image
my $image = '';
# path to partitions specification
my $partitions_spec = '';

GetOptions(
    "spec=s" => \$spec,
    "help" => \$help,
    "version" => \$version)
    or die("Wrong set of command line arguments were passed\n");

if ($spec eq '') {
    print STDERR "Error: specification must be provided\n";
    exit 1;
}

# create directory for output images if it is not exists
create_dir_if_not_exists(OUTPUT_DIR);

open(my $spec_fd, "<", $spec)
    or die("Error: can't read given specification - $!");

$spec_data = do {local $/; <$spec_fd>};

$spec_data = YAML::Load($spec_data);

#
# create new disk if need
#
($img_dir, $image) = init_disk($spec_data, $spec, OUTPUT_DIR);

#
# create specified partitions
#
if (is_disk_partitioned($image) == 1) {
    print STDOUT "Warning: disk $image is already partitioned\n";
} else {
    $partitions_spec = create_partitions($spec_data, $image);
}

close($spec_fd)
    or warn "Error: can't close specification file - $!";

exit 0;
